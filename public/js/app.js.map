{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/comments.js","js/models/comments.js","js/directives/dragDrop.js","js/directives/googleMap.js","js/controllers/main.js","js/router.js","js/controllers/users.js","js/models/users.js","js/controllers/vineyards.js","js/models/vineyards.js","js/controllers/vineyardsNew.js","js/controllers/vineyardsShow.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","CommentsIndexController","Comment","commentsIndex","all","query","CommentsShowController","deleteComment","commentsShow","comment","$remove","get","params","delete","isLoggedIn","isAuthenticated","CommentsEditController","update","commentsEdit","$update","$resource","id","method","dragDrop","reader","FileReader","restrict","replace","templateUrl","link","$scope","element","base64String","active","onload","result","$apply","on","e","preventDefault","file","target","files","dataTransfer","readAsDataURL","googleMap","$window","template","scope","vineyard","$watch","center","console","log","google","maps","LatLng","latitude","longitude","map","Map","zoom","disableDefaultUI","zoomControl","scaleControl","scrollwheel","Marker","position","animation","Animation","DROP","MainController","$rootScope","logout","secureState","toState","main","message","protectedStates","includes","name","userId","getPayload","$on","Router","$stateProvider","$urlRouterProvider","state","url","controller","otherwise","UsersIndexController","User","usersIndex","UsersShowController","isCurrentUser","parseFloat","deleteUser","usersShow","UsersEditController","usersEdit","VineyardsController","Vineyard","vineyards","VineyardsNewController","createVineyard","vineyardsNew","save","currentUser","VineyardsEditController","vineyardsEdit","VineyardsShowController","addComment","vineyardsShow","data","comments","push","reload","deleteVineyard","vineyard_id","angular","module","constant","config","$inject","factory","directive"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .controller('CommentsIndexController', CommentsIndexController)\n  .controller('CommentsShowController', CommentsShowController)\n  .controller('CommentsEditController', CommentsEditController);\n\nCommentsIndexController.$inject = ['Comment'];\nfunction CommentsIndexController(Comment) {\n  const commentsIndex = this;\n\n  commentsIndex.all = Comment.query();\n}\n\n\nCommentsShowController.$inject = ['Comment', '$state', '$auth'];\nfunction CommentsShowController(Comment, $state, $auth){\n  const commentsShow = this;\n\n  commentsShow.comment = Comment.get($state.params);\n\n  function deleteComment() {\n    commentsShow.comment.$remove(() => {\n      $state.go('commentsIndex');\n    });\n  }\n  commentsShow.delete = deleteComment;\n  commentsShow.isLoggedIn = $auth.isAuthenticated;\n}\n\n\n\nCommentsEditController.$inject = ['Comment', '$state'];\nfunction CommentsEditController(Comment, $state) {\n  const commentsEdit = this;\n\n  commentsEdit.comment = Comment.get($state.params);\n\n  function update() {\n    commentsEdit.comment.$update(() => {\n      $state.go('commentsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n  .factory('Comment', Comment);\n\nComment.$inject = ['$resource', 'API_URL'];\nfunction Comment($resource, API_URL) {\n  return new $resource(`${API_URL}/comments/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.directive('dragDrop', dragDrop);\n\nfunction dragDrop(){\n  const reader = new FileReader();\n  return{\n    restrict: 'E',\n    replace: true,\n    templateUrl: 'templates/dragDrop.html',\n    link($scope, element){\n      // console.log(element);\n\n      $scope.base64String = null;\n      $scope.active = false;\n\n      reader.onload = () => {\n        // console.log(reader.result);\n        $scope.base64String = reader.result;\n        $scope.$apply();\n      };\n\n      element\n      .on('dragover', () => {\n        $scope.active = true;\n        $scope.$apply();\n      })\n      .on('dragover', (e) =>{\n        e.preventDefault();\n        // console.log('success');\n      })\n      .on('dragleave', () => {\n        $scope.active = false;\n        $scope.$apply();\n      })\n      .on('drop', (e)=> {\n        e.preventDefault();\n        // console.log('over');\n        const file = (e.target.files || e.dataTransfer.files)[0];\n\n        reader.readAsDataURL(file); //turn into base64 url encoded\n      });\n    }\n  };\n}\n","angular.module('finalProject')\n  .directive('googleMap', googleMap);\n\ngoogleMap.$inject = ['$window'];\nfunction googleMap($window) {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: '<div class=\"google-map\"></div>',\n    scope: {\n      vineyard: '='\n    },\n    link: function($scope, element) {\n      $scope.$watch('center', ()=> {\n        if($scope.center){\n          console.log($scope);\n          const center = new $window.google.maps.LatLng($scope.vineyard.latitude ,$scope.vineyard.longitude);\n          const map = new $window.google.maps.Map(element[0], {\n            center: center,\n            zoom: 14,\n            disableDefaultUI: true,\n            zoomControl: true,\n            scaleControl: true,\n            scrollwheel: false\n          });\n\n          new $window.google.maps.Marker({\n            position: center,\n            map: map,\n            animation: $window.google.maps.Animation.DROP\n          });\n\n        }\n      });\n\n    }\n  };\n}\n\n\n\n\n\n// googleMap.$inject = ['$window'];\n// function googleMap($window) {\n//   return {\n//     restrict: 'E',\n//     replace: true,\n//     template: '<div class=\"google-map\"></div>',\n//     scope: {\n//       center: '='\n//     },\n//     link: function($scope, element) {\n//       $scope.$watch('center', (val) =>{\n//         console.log(val);\n//         if(val && val.lat && val.lng){\n//           const map = new $window.google.maps.Map(element[0], {\n//             center: $scope.center,\n//             zoom: 14\n//           });\n//\n//           new $window.google.maps.Marker({\n//             position: $scope.center,\n//             map,\n//             animation: $window.google.maps.Animation.DROP\n//           });\n//         }\n//       });\n//     }\n//   };\n// }\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope){\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.userId = $auth.getPayload().id;\n\n  function logout(){\n    $auth.logout()\n      .then(()=>{\n        $state.go('usersIndex');\n      });\n  }\n\n  const protectedStates = ['usersEdit'];\n// toParams gets the id from url, toState gets the name of the state\n  function secureState(e, toState){\n    main.message = null;\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)){\n      e.preventDefault();\n      $state.go('login');\n      main.message= 'you must be logged in to go there';\n    }\n  }\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('vineyardsIndex', {\n      url: '/vineyards',\n      templateUrl: '/templates/vineyards.html',\n      controller: 'VineyardsController as vineyards'\n    })\n    .state('vineyardsNew', {\n      url: '/vineyards/new',\n      templateUrl: '/templates/vineyardsNew.html',\n      controller: 'VineyardsNewController as vineyardsNew'\n    })\n    .state('vineyardsShow', {\n      url: '/vineyards/:id',\n      templateUrl: '/templates/vineyardsShow.html',\n      controller: 'VineyardsShowController as vineyardsShow'\n    })\n    .state('vineyardsEdit', {\n      url: '/vineyards/:id/edit',\n      templateUrl: '/templates/vineyardsEdit.html',\n      controller: 'VineyardsEditController as vineyardsEdit'\n    })\n    .state('home', {\n      url: '/',\n      templateUrl: '/templates/home.html',\n      controller: 'LoginController as login'\n    })\n    // .state('commentsNew', {\n    //   url: '/comments/new',\n    //   templateUrl: '/templates/commentsNew.html',\n    //   controller: 'VineyardsShowController as vineyardsShow'\n    // })\n    ;\n\n  $urlRouterProvider.otherwise('/');\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\n//usersshow\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth){\n  const usersShow = this;\n\n  usersShow.user = User.get($state.params);\n\n  function isCurrentUser() {\n    return $auth.getPayload().id === parseFloat($state.params.id);\n  }\n   // get payload gives us current users id - user ID is IN TOKEN (BACKEND)\n  usersShow.isCurrentUser = isCurrentUser;\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n  usersShow.delete = deleteUser;\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n}\n\n//user edit and update\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('VineyardsController', VineyardsController);\n\nVineyardsController.$inject = ['Vineyard'];\n\nfunction VineyardsController(Vineyard) {\n  const vineyards = this;\n\n  vineyards.all = Vineyard.query();\n  console.log(vineyards);\n}\n","angular.module('finalProject')\n  .factory('Vineyard', Vineyard);\n\nVineyard.$inject = ['$resource', 'API_URL'];\nfunction Vineyard($resource, API_URL) {\n  return new $resource(`${API_URL}/vineyards/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('VineyardsEditController', VineyardsEditController)\n  .controller('VineyardsNewController', VineyardsNewController);\n\nVineyardsNewController.$inject = ['Vineyard', '$state', '$auth'];\n\nfunction VineyardsNewController(Vineyard, $state, $auth) {\n\n  const vineyardsNew = this;\n  const currentUser = $auth.getPayload().id;\n  vineyardsNew.vineyard = {};\n\n  vineyardsNew.vineyard.user = currentUser;\n\n  function createVineyard() {\n\n    // get userId from payload\n    vineyardsNew.vineyard.user = $auth.getPayload().id;\n\n    Vineyard.save(vineyardsNew.vineyard, (vineyard) => {\n      $state.go('vineyardsShow', { id: vineyard.id });\n    });\n  }\n  vineyardsNew.createVineyard = createVineyard;\n}\n\n//edit\nVineyardsEditController.$inject = ['Vineyard', '$state'];\n\nfunction VineyardsEditController(vineyard, $state) {\n  const vineyardsEdit = this;\n  vineyardsEdit.vineyard = vineyard.get($state.params);\n\n  function update() {\n    vineyard.update({ id: vineyardsEdit.vineyard.id }, vineyardsEdit.vineyard, () => {\n      $state.go('vineyardsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n}\n","angular.module('finalProject')\n  .controller('VineyardsShowController', VineyardsShowController);\n\nVineyardsShowController.$inject = ['Vineyard', '$state', 'Comment', '$auth'];\nfunction VineyardsShowController(Vineyard, $state, Comment, $auth){\n  const vineyardsShow = this;\n\n  vineyardsShow.vineyard = Vineyard.get($state.params);\n\n  //     // Google Map\n  // MapService\n  //   .getCoords(vineyardsShow.vineyard.postcode)\n  //   .then(res => {\n  //     vineyardsShow.center = res;\n  //   }, err => {\n  //     console.log(err);\n  //   });\n\n\n  function isCurrentUser(){\n    console.log('isCurrentUser?', $auth.getPayload().id === parseFloat($state.params.id));\n    return $auth.getPayload().id === parseFloat($state.params.id);\n  }\n  vineyardsShow.isCurrentUser = isCurrentUser;\n  vineyardsShow.vineyard = Vineyard.get($state.params);\n\n  vineyardsShow.comment = {\n    vineyard_id: $state.params.id\n  };\n\n  // console.log(vineyardsShow.comment);\n\n  function addComment() {\n    Comment.save(vineyardsShow.comment, (data) => {\n      console.log(data);\n      vineyardsShow.vineyard.comments.push(data);\n      $state.reload();\n    });\n  }\n\n  vineyardsShow.addComment = addComment;\n\n\n  function deleteVineyard() {\n    vineyardsShow.vineyard.$remove(() => {\n      $state.go('vineyardsIndex');\n    });\n  }\n  vineyardsShow.deleteVineyard = deleteVineyard;\n  vineyardsShow.isLoggedIn = $auth.isAuthenticated;\n\n\n\n}\n"]}